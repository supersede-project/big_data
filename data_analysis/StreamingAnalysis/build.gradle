// Apply the java plugin to add support for Java
apply plugin: 'java'
//apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'
apply plugin: 'maven'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "${artifactory_contextUrl}/libs-snapshot"
            name = 'maven-supersede-snapshot'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "${artifactory_contextUrl}/libs-release"
            name = 'maven-supersede-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        //classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.2.RELEASE")
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.2"
    }
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    mavenCentral()
    add buildscript.repositories.getByName ("maven-supersede-snapshot")
    add buildscript.repositories.getByName ("maven-supersede-release")
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'

    compile("eu.supersede.if:eu.supersede.if.api:0.4.0-SNAPSHOT"){
        changing = true
        exclude (group: 'com.fasterxml.jackson.core')
    }

    compile(group: 'org.apache.kafka', name: 'kafka_2.10', version: '0.10.1.1')
    compile(group: 'org.apache.kafka', name: 'kafka-clients', version: '0.10.1.1')
    compile(group: 'org.apache.spark', name: 'spark-core_2.10', version: '2.2.0')
    compile(group: 'org.apache.spark', name: 'spark-streaming_2.10', version: '2.2.0')
    compile(group: 'org.apache.spark', name: 'spark-streaming-kafka-0-10_2.10', version: '2.2.0')

    compile 'org.kie:kie-api:6.5.0.Final'
    compile 'org.drools:drools-core:6.5.0.Final'
    compile 'org.drools:drools-compiler:6.5.0.Final'
    compile 'org.drools:drools-decisiontables:6.5.0.Final'
    compile 'org.jbpm:jbpm-bpmn2:6.5.0.Final'

    compile files ('./lib/andes-client-3.1.1.jar')
    compile files ('./lib/geronimo-jms_1.1_spec-1.1.0.wso2v1.jar')
    compile files ('./lib/org.wso2.carbon.logging-4.4.1.jar')
    compile files ('./lib/org.wso2.securevault-1.0.0-wso2v2.jar')

    compile 'com.goebl:david-webb:1.3.0'

    compile("eu.supersede.mdm.storage:MetadataStorage:0.1.0-SNAPSHOT"){
        changing=true
        exclude (group: 'com.fasterxml.jackson.core')
        exclude (group: 'org.scala-lang')
        exclude (group: 'com.github.fommil.netlib')
    }


    compile("eu.supersede.dynadapt.dm:eu.supersede.dynadapt.dm.integration:1.0.0-SNAPSHOT"){
        changing = true
        exclude (group: 'com.fasterxml.jackson.core')
    }

    compile("eu.supersede.feedbackanalysis:FeedbackAnalysis:0.1.0-SNAPSHOT"){
        changing=true
        exclude (group: 'xml-apis')
        exclude (group: 'com.github.fommil.netlib')
    }

    compile 'com.opencsv:opencsv:3.9'

    compile ('org.apache.jena:apache-jena-libs:3.6.0'){
        exclude (group: 'com.fasterxml.jackson.core')
    }

    compile files('lib/jaws-1.3.1.jar')
}

configurations {
    provided
    compile.extendsFrom provided
    compile {
        transitive = true
    }
}


configurations.all {
    //Avoids conflict: SL4J Multiple bindings were found on the class path
    exclude group: "org.slf4j", module: "log4j-over-slf4j"
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencies {
    runtime files('src/main/resources')
}


task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
}

// Test execution JVM properties
tasks.withType(Test){
    systemProperty 'is.admin.user', System.getProperty ('is.admin.user', 'admin@atos.supersede.eu')
    systemProperty 'is.admin.passwd', System.getProperty ('is.admin.passwd', 'rtgWCyrc')
    systemProperty 'supersede.if.properties', System.getProperty ('supersede.if.properties', 'if.properties')
}

// Test execution filter
test {
    filter {
        includeTestsMatching "*MailProxyTest"
        includeTestsMatching "*FEDataStoreProxyTest"
        includeTestsMatching "*IFAuthenticationManagerTest"
    }
}
/*
jar {
    manifest {
        attributes 'Main-Class': 'eu.supersede.bdma.sa.Main'
    }
}

shadowJar {
    baseName = 'shadow'
    classifier = null
    version = null
}
*/

jar {
    dependsOn configurations.runtime
    zip64 true
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}
